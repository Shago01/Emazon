plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.Emazon'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	implementation 'org.springframework.boot:spring-boot-starter'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core:5.5.0'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.postgresql:postgresql'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-web'


	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
	useJUnitPlatform()
}
test {
	testLogging {
		// Muestra solo el resumen de los tests
		events "passed", "skipped", "failed"

		// Usa colores en la consola (requiere que la consola soporte ANSI)
		showStandardStreams = true
		exceptionFormat "short"
		afterSuite { desc, result ->
			if (!desc.parent) { // solo mostrar al final del test suite
				def output = "\nResultado: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} exitosos, ${result.failedTestCount} fallidos)"
				def color = result.failedTestCount > 0 ? "\u001B[31m" : "\u001B[32m" // Rojo si hay fallos, verde si todos pasan
				println "$color$output\u001B[0m"
			}
		}
	}
}

